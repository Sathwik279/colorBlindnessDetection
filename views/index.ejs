<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
    />
    <title>3D Model Viewer with Improved Lighting and Device Orientation</title>
    <style>
      body {
        margin: 0;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background-color: #e9d8fd;
        min-height: 100vh;
      }

      canvas {
        display: block;
        width: 100%;
        height: 100%;
        max-width: 1200px; /* Max width for large screens */
        max-height: 800px; /* Adjust the height for landscape */
        background-color: #f3f4f6;
        border-radius: 10px;
        border: 1px solid #d1d5db;
      }

      /* Responsive layout for buttons and controls */
      #controls {
        margin-top: 10px;
        width: 100%;
        max-width: 600px;
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      button {
        width: 100%;
        padding: 12px;
        margin-top: 10px;
        font-size: 1rem;
      }

      input {
        width: 100%;
        padding: 12px;
        font-size: 1rem;
      }

      /* Media queries for responsive adjustments */
      @media screen and (max-width: 768px) {
        canvas {
          max-width: 100%;
          max-height: 400px; /* Reduced height for smaller landscape view */
        }

        input, button {
          padding: 10px;
          font-size: 0.9rem;
        }
      }

      @media screen and (orientation: landscape) and (max-width: 600px) {
        canvas {
          max-height: 300px;
        }
      }
    </style>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body>
    <canvas
      id="modelViewer"
      class="bg-gray-200 shadow-lg rounded-xl border border-gray-300"
    ></canvas>

    <button
      id="signout"
      class="bg-red-500 text-white py-2 px-4 rounded-md shadow hover:bg-red-600 transition-all"
    >
      Sign out
    </button>

    <div id="controls" class="flex flex-col items-center space-y-4">
      <input
        type="text"
        id="user-input"
        placeholder="Enter your input"
        class="p-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
      />

      <button
        id="next-btn"
        class="bg-blue-500 text-white py-2 px-4 rounded-md shadow hover:bg-blue-600 transition-all"
      >
        Next Model
      </button>

      <button
        id="submit-btn"
        style="display: none"
        class="bg-green-500 text-white py-2 px-4 rounded-md shadow hover:bg-green-600 transition-all"
      >
        Submit
      </button>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>

    <script>
      const models = <%- JSON.stringify(models) %>;
      let userResponses = [];
      let currentIndex = 0;

      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(
        75,
        window.innerWidth / window.innerHeight,
        0.1,
        1000
      );
      const renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById("modelViewer"),
        antialias: true,
      });
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      scene.background = new THREE.Color(0xffffff);
      renderer.setClearColor(0xffffff);

      const hemisphereLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1);
      scene.add(hemisphereLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
      directionalLight.position.set(5, 10, 7.5).normalize();
      scene.add(directionalLight);

      let currentModel = null;
      const minScale = 0.5;

      function loadModel(model) {
        const loader = new THREE.GLTFLoader();
        loader.load(
          model.path,
          (gltf) => {
            if (currentModel) {
              scene.remove(currentModel);
            }

            const model = gltf.scene;
            model.traverse((child) => {
              if (child.isMesh) {
                child.material.side = THREE.DoubleSide;
              }
            });

            const box = new THREE.Box3().setFromObject(model);
            const size = box.getSize(new THREE.Vector3());
            const maxDimension = Math.max(size.x, size.y, size.z);

            const scale = Math.max(minScale, 1 / maxDimension);
            model.scale.set(scale, scale, scale);

            model.position.set(0, 0, 0);
            scene.add(model);
            currentModel = model;

            const center = box.getCenter(new THREE.Vector3());
            model.position.sub(center);

            camera.position.z = Math.max(maxDimension * scale * 0.5, 3);

            const animate = function () {
              renderer.render(scene, camera);
              requestAnimationFrame(animate);
            };
            animate();
          },
          undefined,
          (error) => {
            console.error("An error occurred while loading the model:", error);
          }
        );
      }

      function nextModel() {
        const inputField = document.getElementById("user-input");

        const userInput = inputField.value.trim();
        if (userInput) {
          userResponses[currentIndex] = {
            plateNo: models[currentIndex].plateNo,
            answer: userInput,
          };
          inputField.value = "";
        }

        console.log(userResponses);
        currentIndex++;

        if (currentIndex === models.length - 1) {
          document.getElementById("next-btn").style.display = "none";
          document.getElementById("submit-btn").style.display = "inline";
        }
        loadModel(models[currentIndex]);
      }

      function submitResponses() {
        const inputField = document.getElementById("user-input");

        const userInput = inputField.value.trim();
        if (userInput) {
          userResponses[currentIndex] = {
            plateNo: models[currentIndex].plateNo,
            answer: userInput,
          };
          inputField.value = "";
        }

        console.log("Final user responses:", userResponses);

        fetch("/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ responses: userResponses }),
        })
          .then((response) => response.json())
          .then((data) => {
            alert(`Blindness Type : ${data.blindnessType}  Intensity : ${data.intensity}`);
          })
          .catch((error) => console.error("Error submitting responses:", error));
      }

      camera.position.set(0, 0, 5);

      const controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;
      controls.dampingFactor = 0.25;

      window.addEventListener("resize", () => {
        const width = window.innerWidth;
        const height = window.innerHeight;
        renderer.setSize(width, height);
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
      });

      loadModel(models[currentIndex]);

      document.getElementById("next-btn").addEventListener("click", nextModel);
      document.getElementById("submit-btn").addEventListener("click", submitResponses);
      document.getElementById("signout").addEventListener("click", () => {
        fetch("/", {
          method: "GET",
        })
          .then((response) => {
            if (response.ok) {
              window.location.href = "/";
            } else {
              alert("Sign out failed.");
            }
          })
          .catch((error) => console.error("Error during sign out:", error));
      });

      // Handling device orientation
      function handleOrientation(event) {
        const alpha = event.alpha
          ? THREE.Math.degToRad(event.alpha)
          : 0;
        const beta = event.beta
          ? THREE.Math.degToRad(event.beta)
          : 0;
        const gamma = event.gamma
          ? THREE.Math.degToRad(event.gamma)
          : 0;

        camera.rotation.set(beta, gamma, alpha);
      }

      window.addEventListener("deviceorientation", handleOrientation);
    </script>
  </body>
</html>
