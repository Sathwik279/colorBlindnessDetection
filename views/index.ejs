<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>3D Model Viewer with Fullscreen and Improved Lighting</title>
    <style>
      body {
        margin: 0;
        overflow: hidden;
        position: relative;
      }
      canvas {
        display: block;
      }
      .corner-buttons {
        position: fixed;
        bottom: 20px;
        right: 20px;
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 8px;
        pointer-events: none;
      }
      .corner-buttons button,
      .corner-buttons input {
        pointer-events: auto;
        width: 50px;
        height: 50px;
        font-size: 12px;
        padding: 4px;
        border-radius: 50%;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      }
      .small-btn {
        width: 50px;
        height: 50px;
        font-size: 10px;
        padding: 4px;
      }
    </style>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-purple-200 min-h-screen flex flex-col items-center justify-center p-4">
    <canvas id="modelViewer" class="w-full h-auto max-h-2000 bg-gray-200 shadow-lg rounded-xl border border-gray-300"></canvas>

    <div class="corner-buttons">
      <button id="fullscreen-btn" class="bg-blue-500 text-white small-btn shadow hover:bg-blue-600 transition-all" title="Fullscreen">FS</button>
      <button id="signout" class="bg-red-500 text-white small-btn shadow hover:bg-red-600 transition-all" title="Sign Out">SO</button>
      <input type="text" id="user-input" placeholder="Input" class="p-2 border border-gray-300 rounded-md shadow-sm text-center w-12" title="User Input" />
      <button id="submit-btn" style="display: none" class="bg-green-500 text-white small-btn shadow hover:bg-green-600 transition-all" title="Submit">Sub</button>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>

    <script>
      const models = <%- JSON.stringify(models) %>;
      let userResponses = [];
      let currentIndex = 0;

      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('modelViewer'), antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      scene.background = new THREE.Color(0xffffff);
      renderer.setClearColor(0xffffff);

      const hemisphereLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1);
      scene.add(hemisphereLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
      directionalLight.position.set(5, 10, 7.5).normalize();
      scene.add(directionalLight);

      let currentModel = null;

      function loadModel(model) {
        const loader = new THREE.GLTFLoader();
        loader.load(model.path, (gltf) => {
          if (currentModel) {
            scene.remove(currentModel);
          }

          const model = gltf.scene;
          model.traverse((child) => {
            if (child.isMesh) {
              child.material.side = THREE.DoubleSide;
            }
          });

          const box = new THREE.Box3().setFromObject(model);
          const size = box.getSize(new THREE.Vector3());
          const maxDimension = Math.max(size.x, size.y, size.z);

          const scale = Math.max(0.5, 1 / maxDimension);
          model.scale.set(scale, scale, scale);

          model.position.set(0, 0, 0);
          scene.add(model);
          currentModel = model;

          const center = box.getCenter(new THREE.Vector3());
          model.position.sub(center);

          camera.position.z = Math.max(maxDimension * scale * 0.5, 3);

          const animate = function () {
            renderer.render(scene, camera);
            requestAnimationFrame(animate);
          };
          animate();
        }, undefined, (error) => {
          console.error('An error occurred while loading the model:', error);
        });
      }

      function nextModel() {
        const inputField = document.getElementById("user-input");
        const userInput = inputField.value.trim();

        if (userInput) {
          userResponses[currentIndex] = {
            plateNo: models[currentIndex].plateNo,
            answer: userInput
          };
          inputField.value = "";
        }

        currentIndex++;

        if (currentIndex === models.length - 1) {
          document.getElementById("submit-btn").style.display = "inline";
          submitResponses(); // Auto-submit at the last model
        } else {
          loadModel(models[currentIndex]);
        }
      }

      function submitResponses() {
        const inputField = document.getElementById("user-input");
        const userInput = inputField.value.trim();

        if (userInput) {
          userResponses[currentIndex] = {
            plateNo: models[currentIndex].plateNo,
            answer: userInput
          };
          inputField.value = "";
        }

        fetch("/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ responses: userResponses }),
        })
        .then((response) => response.json())
        .then((data) => {
          alert(`Blindness Type: ${data.blindnessType}, Intensity: ${data.intensity}`);
        })
        .catch((error) => console.error("Error submitting responses:", error));
      }

      camera.position.set(0, 0, 5);
      const controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;
      controls.dampingFactor = 0.25;

      window.addEventListener("resize", () => {
        const width = window.innerWidth;
        const height = window.innerHeight;
        renderer.setSize(width, height);
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
      });

      // Fullscreen functionality
      const fullscreenButton = document.getElementById("fullscreen-btn");

      fullscreenButton.addEventListener("click", () => {
        if (!document.fullscreenElement) {
          document.documentElement.requestFullscreen();
          fullscreenButton.textContent = "Exit Fullscreen";
        } else {
          if (document.exitFullscreen) {
            document.exitFullscreen();
            fullscreenButton.textContent = "Enter Fullscreen";
          }
        }
      });

      // Orientation Handling
    // Update the handleOrientation function to adjust the model rotation based on orientation
        function handleOrientation(event) {
            const alpha = event.alpha ? THREE.Math.degToRad(event.alpha) : 0; // Rotation around the Z-axis
            const beta = event.beta ? THREE.Math.degToRad(event.beta) : 0;     // Rotation around the X-axis
            const gamma = event.gamma ? THREE.Math.degToRad(event.gamma) : 0; // Rotation around the Y-axis

            if (currentModel) {
                currentModel.rotation.order = "YXZ";
                
                // Rotate the model based on the device orientation
                // You can adjust the factors below to get the desired rotation effect
                currentModel.rotation.x = beta;   // Adjust rotation based on beta
                currentModel.rotation.y = gamma;   // Adjust rotation based on gamma
                currentModel.rotation.z = alpha;   // Adjust rotation based on alpha
            }
        }

        function updateModelOrientation() {
            if (window.matchMedia("(orientation: landscape)").matches) {
                if (currentModel) {
                    // If in landscape mode, rotate the model further for a better view
                    currentModel.rotation.x = 0; // Reset rotation for landscape
                    currentModel.rotation.y = Math.PI / 4; // Rotate for better view in landscape
                }
            } else {
                if (currentModel) {
                    // Reset the rotation for portrait mode
                    currentModel.rotation.x = 0; 
                    currentModel.rotation.y = 0; 
                }
            }
        }

        // Add event listeners to handle device orientation and resize
        if (window.DeviceOrientationEvent) {
            window.addEventListener("deviceorientation", handleOrientation, true);
            window.addEventListener("resize", updateModelOrientation);
        } else {
            console.log("Device orientation is not supported on this device.");
        }

      // Continuous Voice Recognition
      function startContinuousRecognition() {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const recognition = new SpeechRecognition();
        recognition.interimResults = true;

        recognition.onresult = (event) => {
          const transcript = event.results[event.resultIndex][0].transcript;
          document.getElementById("user-input").value = transcript;
        };

        recognition.onerror = (event) => {
          console.error('Speech recognition error:', event.error);
        };

        recognition.start();
      }

      const signoutButton = document.getElementById("signout");
      signoutButton.addEventListener("click", () => {
        // Implement sign-out logic here
        console.log("Sign out button clicked");
      });

      const submitButton = document.getElementById("submit-btn");
      submitButton.addEventListener("click", submitResponses);

      const inputField = document.getElementById("user-input");
      inputField.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
          nextModel();
        }
      });

      loadModel(models[currentIndex]);
    </script>
  </body>
</html>
