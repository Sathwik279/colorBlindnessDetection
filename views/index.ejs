<!DOCTYPE html>
<html>
  <head>
    <title>VR Experience</title>
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
  </head>
  <body>
    <a-scene>
      <!-- Background Sky -->
      <a-sky color="#000000"></a-sky> <!-- Black background -->
      
      <!-- Lighting -->
      <a-light 
        type="spot" 
        position="0 5 5" 
        intensity="2" 
        angle="60" 
        distance="20" 
        target="#model" 
        color="#ffffff">
      </a-light>

      <a-light type="ambient" color="#333" intensity="0.5"></a-light>
      
      <!-- 3D Model -->
      <a-entity 
        id="model"
        gltf-model=""
        position="0 1.5 -4" 
        scale="3 3 3" 
        rotation="0 0 0">
      </a-entity>

    
      <!-- Camera -->
      <a-camera position="0 1.6 2" look-controls="enabled: true"></a-camera>

    </a-scene>
    <!-- Controls -->
    <div class="corner-buttons">
      <button
        id="fullscreen-btn"
        class="bg-blue-500 text-white small-btn shadow hover:bg-blue-600 transition-all"
        title="Fullscreen"
      >
        FS
      </button>
      <button
        id="signout"
        class="bg-red-500 text-white small-btn shadow hover:bg-red-600 transition-all"
        title="Sign Out"
      >
        SO
      </button>

      <input
        type="text"
        id="user-input"
        placeholder="Input"
        class="p-2 border border-gray-300 rounded-md shadow-sm text-center w-12"
        title="User Input"
      />

      <button
        id="next-btn"
        class="bg-blue-500 text-white small-btn shadow hover:bg-blue-600 transition-all"
        title="Next"
      >
        Next
      </button>

      <button
        id="submit-btn"
        style="display: none"
        class="bg-green-500 text-white small-btn shadow hover:bg-green-600 transition-all"
        title="Submit"
      >
        Sub
      </button>
    </div>
    <script>
      let currentIndex = 0;
      const models = <%- JSON.stringify(models) %>; // Models array passed in the script tag
      console.log(models);
      let userResponses = [];
      let modelsLen = models.length

      function recognizeSpeech() {
      return new Promise((resolve, reject) => {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const recognition = new SpeechRecognition();
        recognition.interimResults = false;
        recognition.lang = "en-US";
        recognition.continuous = true; 

        recognition.onresult = (event) => {
          const transcript = event.results[0][0].transcript.trim().toLowerCase();
          resolve(transcript); // Resolve the promise with the recognized text
        };

        recognition.onerror = (event) => {
          reject(event.error); // Reject the promise if an error occurs
        };

        recognition.start();
      });
    }


      async function loadAndRecognize(arr){

        const validAnswers = ["12", "29", "57", "15", "74", "97", "45"];
        const defaultAnswer = "12";
        let userAnswer = "12";
        ///get the tag
        const modelEntity = document.querySelector("#model");
        
        
        for (const model of models) {
        // Load the model
        modelEntity.setAttribute("gltf-model", model.path);
        console.log(`Loaded model: ${model.path}`);

        try {
          // Wait for speech recognition to complete
          const transcript = await recognizeSpeech();
          console.log(`Transcript: ${transcript}`);
          const userAnswer = validAnswers.includes(transcript) ? transcript : defaultAnswer;

              // Save the response
              userResponses.push({
                plateNo: model.plateNo,
                answer: userAnswer,
              });
            } catch (error) {
              console.error("Recognition error:", error);

              // Save default response in case of an error
              userResponses.push({
                plateNo: model.plateNo,
                answer: defaultAnswer,
              });
            }
          }
          //submit the results
          fetch("/submit", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ responses: userResponses }),
            })
            .then((response) => response.json())
            .then((data) => {
              alert(`Blindness Type: ${data.blindnessType}, Intensity: ${data.intensity}`);
            })
            .catch((error) => console.error("Error submitting responses:", error));
        }

      loadAndRecognize(models);


      
      // Fullscreen functionality
      const fullscreenButton = document.getElementById("fullscreen-btn");
      fullscreenButton.addEventListener("click", () => {
        if (!document.fullscreenElement) {
          document.documentElement.requestFullscreen();
          fullscreenButton.textContent = "Exit Fullscreen";
        } else {
          if (document.exitFullscreen) {
            document.exitFullscreen();
            fullscreenButton.textContent = "Enter Fullscreen";
          }
        }
      });

      

      // Sign out event listener
      document.getElementById("signout").addEventListener("click", () => {
        fetch("/", { method: "GET" })
          .then(response => {
            if (response.ok) window.location.href = "/"; // Redirect to login page
            else alert("Sign out failed.");
          })
          .catch(error => console.error("Error during sign out:", error));
      });

     
    </script>
  </body>
</html>
